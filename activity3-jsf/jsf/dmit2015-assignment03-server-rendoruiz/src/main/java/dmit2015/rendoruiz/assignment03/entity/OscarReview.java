package dmit2015.rendoruiz.assignment03.entity;

import lombok.Data;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.time.LocalDateTime;

/**
 * This class models an Oscar Review that contains 7 fields:
 * id, category, nominee, review, username, createdDateTime, lastModifiedDateTime
 * The category is limited to 5 options: film, actor, actress, editing, effects
 *
 * @author Rendo Ruiz
 * @version 2021.03.12
 *
 */
@Data
@Entity                     // This class is map to database table with the same name as the class name
@Table(name = "oscarreviews")     // This entity class maps to a database table named movies
public class OscarReview implements Serializable {
    @Id                 // This is the primary key field
    @GeneratedValue(strategy = GenerationType.IDENTITY)     // This primary key field is generated by the database
    private Long id;

    @Column(length = 50, nullable = false)
    @NotBlank(message = "The Category field is required.")
    @Pattern(regexp = "^(film|actor|actress|editing|effects)$",  // Must only use letters.
            message = "The field Category must match the regular expression '^(film|actor|actress|editing|effects)$'.")
    private String category;

    @Column(length = 50, nullable = false)
    @NotBlank(message = "The Nominee field is required.")
    @Size(min = 2, max = 50, message = "The field Nominee must be a string with a minimum length of {min} and a maximum length of {max}.")
    private String nominee;

    @Column(length = 500, nullable = false)
    @NotBlank(message = "The Review field is required.")
    @Size(min = 5, max = 500, message = "The field Review must be a string with a minimum length of {min} and a maximum length of {max}.")
    private String review;

    @Column(length = 30, nullable = false)
    @NotBlank(message = "The Username field is required.")
    @Size(min = 3, max = 30, message = "The field Username must be a string with a minimum length of {min} and a maximum length of {max}.")
    @Pattern(regexp = "^[a-z]*$",  // Must only use letters.
            // White space, numbers, and special characters are not allowed.
            message = "The field Username must match the regular expression '^[a-z]*$'.")
    private String username;

    @Column(nullable = false)
    private LocalDateTime createdDateTime;

    @Column(nullable = false)
    private LocalDateTime lastModifiedDateTime;

    @PrePersist
    private void beforePersist() {
        createdDateTime = LocalDateTime.now();
        lastModifiedDateTime = createdDateTime;
    }

    @PreUpdate
    private void beforeUpdate() {
        lastModifiedDateTime = LocalDateTime.now();
    }

    @Version
    private Integer version;
}
